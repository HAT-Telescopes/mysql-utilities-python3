Test case 1 - export metadata only
# WARNING: Using a password on the command line interface can be insecure.
# Source on localhost: ... connected.
SET FOREIGN_KEY_CHECKS=0;
# Exporting metadata from `util_test`
DROP DATABASE IF EXISTS `util_test`;
CREATE DATABASE `util_test`;
USE `util_test`;
# TABLE: `util_test`.`t1`
CREATE TABLE `t1` (
  `a` char(30) DEFAULT NULL
# #if (server1 != 'MySQL') or (int(version1) < 80000)
) ENGINE=MEMORY DEFAULT CHARSET=latin1;
# #else
) ENGINE=MEMORY DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `util_test`.`t2`
CREATE TABLE `t2` (
  `a` char(30) DEFAULT NULL
# #if (server1 != 'MySQL') or (int(version1) < 80000)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
# #else
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `util_test`.`t3`
CREATE TABLE `t3` (
# #if (server1 != 'MySQL') or (int(version1) < 80000)
  `a` int(11) NOT NULL AUTO_INCREMENT,
  `b` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`a`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
# #else
  `a` int NOT NULL AUTO_INCREMENT,
  `b` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`a`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `util_test`.`t4`
CREATE TABLE `t4` (
# #if (server1 != 'MySQL') or (int(version1) < 80000)
  `c` int(11) NOT NULL,
  `d` int(11) NOT NULL,
  KEY `ref_t3` (`c`),
  CONSTRAINT `ref_t3` FOREIGN KEY (`c`) REFERENCES `t3` (`a`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
# #else
  `c` int NOT NULL,
  `d` int NOT NULL,
  KEY `ref_t3` (`c`),
  CONSTRAINT `ref_t3` FOREIGN KEY (`c`) REFERENCES `t3` (`a`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `util_test`.`t5`
CREATE TABLE `t5` (
# #if (server1 != 'MySQL') or (int(version1) < 80000)
  `product_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) DEFAULT NULL,
  `base_price` decimal(20,2) unsigned DEFAULT NULL,
  `tax_percentage` decimal(3,0) unsigned DEFAULT NULL,
  PRIMARY KEY (`product_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
# #else
  `product_id` int unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) DEFAULT NULL,
  `base_price` decimal(20,2) unsigned DEFAULT NULL,
  `tax_percentage` decimal(3,0) unsigned DEFAULT NULL,
  PRIMARY KEY (`product_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# FUNCTION: `util_test`.`f1`
DELIMITER ||
# #if (server1 != 'MySQL') or (int(version1) < 80000)
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `f1`() RETURNS int(11)
# #else
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `f1`() RETURNS int
# #endif
    DETERMINISTIC
RETURN (SELECT 1);
||
DELIMITER ;
# FUNCTION: `util_test`.`f2`
DELIMITER ||
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `f2`(base_price DECIMAL(20,2) UNSIGNED, tax_percentage DECIMAL(3,0) UNSIGNED) RETURNS decimal(21,2) unsigned
    DETERMINISTIC
RETURN base_price + base_price*(tax_percentage/100);
||
DELIMITER ;
# PROCEDURE: `util_test`.`p1`
DELIMITER ||
CREATE DEFINER=`XXXX`@`XXXXXXXXX` PROCEDURE `p1`(p1 CHAR(20))
INSERT INTO util_test.t1 VALUES ("50");
||
DELIMITER ;
# VIEW: `util_test`.`v1`
CREATE ALGORITHM=UNDEFINED DEFINER=`XXXX`@`XXXXXXXXX` SQL SECURITY DEFINER VIEW `v1` AS select `t1`.`a` AS `a` from `t1`;
# VIEW: `util_test`.`v2`
CREATE ALGORITHM=UNDEFINED DEFINER=`XXXX`@`XXXXXXXXX` SQL SECURITY DEFINER VIEW `v2` AS select `t5`.`name` AS `name`,`util_test`.`f2`(`t5`.`base_price`,`t5`.`tax_percentage`) AS `price` from `t5`;
# TRIGGER: `util_test`.`trg`
DELIMITER ||
# #if (server1 != 'MySQL') or (int(version1) < 80000)
CREATE DEFINER=`XXXX`@`XXXXXXXXX` TRIGGER util_test.trg AFTER INSERT ON util_test.t1 FOR EACH ROW INSERT INTO util_test.t2 VALUES('Test objects count');
# #else
CREATE DEFINER=`XXXX`@`XXXXXXXXX` TRIGGER `trg` AFTER INSERT ON `t1` FOR EACH ROW INSERT INTO util_test.t2 VALUES('Test objects count');
# #endif
||
DELIMITER ;
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT ALTER ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT ALTER ROUTINE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE ROUTINE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE TEMPORARY TABLES ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE VIEW ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT DELETE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT DROP ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT EVENT ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT EXECUTE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT INDEX ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT INSERT ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT LOCK TABLES ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT REFERENCES ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT SELECT ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT SHOW VIEW ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT TRIGGER ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT UPDATE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT ALTER ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT ALTER ROUTINE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE ROUTINE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE TEMPORARY TABLES ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE VIEW ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT DELETE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT DROP ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT EVENT ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT EXECUTE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT INDEX ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT INSERT ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT LOCK TABLES ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT REFERENCES ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT SELECT ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT SHOW VIEW ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT TRIGGER ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT UPDATE ON `util_test`.* TO 'joe_wildcard'@'%';
#...done.
SET FOREIGN_KEY_CHECKS=1;
Test case 2 - export data only - single rows
# WARNING: Using a password on the command line interface can be insecure.
# Source on localhost: ... connected.
SET FOREIGN_KEY_CHECKS=0;
USE `util_test`;
# Exporting data from `util_test`
# Data for table `util_test`.`t1`:
INSERT INTO `util_test`.`t1` VALUES ('01 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('02 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('03 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('04 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('05 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('06 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('07 Test Basic database example');
# Data for table `util_test`.`t2`:
INSERT INTO `util_test`.`t2` VALUES ('11 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES ('12 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES ('13 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES (NULL);
# Data for table `util_test`.`t3`:
INSERT INTO `util_test`.`t3` VALUES (1, '14 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (2, '15 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (3, '16 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (4, NULL);
# Data for table `util_test`.`t4`:
INSERT INTO `util_test`.`t4` VALUES (3, 2);
# Data for table `util_test`.`t5`:
INSERT INTO `util_test`.`t5` VALUES (1, 'kitkat', 0.99, 19);
INSERT INTO `util_test`.`t5` VALUES (2, 'M&M', 5.99, 19);
INSERT INTO `util_test`.`t5` VALUES (3, 'milk', 0.67, 5);
INSERT INTO `util_test`.`t5` VALUES (4, 'Dr. Pepper', 0.99, 19);
#...done.
SET FOREIGN_KEY_CHECKS=1;
Test case 3 - export data only - bulk insert
# WARNING: Using a password on the command line interface can be insecure.
# Source on localhost: ... connected.
SET FOREIGN_KEY_CHECKS=0;
USE `util_test`;
# Exporting data from `util_test`
# Data for table `util_test`.`t1`:
INSERT INTO `util_test`.`t1` VALUES  ('01 Test Basic database example'),  ('02 Test Basic database example'),  ('03 Test Basic database example'),  ('04 Test Basic database example'),  ('05 Test Basic database example'),  ('06 Test Basic database example'),  ('07 Test Basic database example');
# Data for table `util_test`.`t2`:
INSERT INTO `util_test`.`t2` VALUES  ('11 Test Basic database example'),  ('12 Test Basic database example'),  ('13 Test Basic database example'),  (NULL);
# Data for table `util_test`.`t3`:
INSERT INTO `util_test`.`t3` VALUES  (1, '14 test fkeys'),  (2, '15 test fkeys'),  (3, '16 test fkeys'),  (4, NULL);
# Data for table `util_test`.`t4`:
INSERT INTO `util_test`.`t4` VALUES  (3, 2);
# Data for table `util_test`.`t5`:
INSERT INTO `util_test`.`t5` VALUES  (1, 'kitkat', 0.99, 19),  (2, 'M&M', 5.99, 19),  (3, 'milk', 0.67, 5),  (4, 'Dr. Pepper', 0.99, 19);
#...done.
SET FOREIGN_KEY_CHECKS=1;
Test case 4 - export data and metadata
# WARNING: Using a password on the command line interface can be insecure.
# Source on localhost: ... connected.
SET FOREIGN_KEY_CHECKS=0;
# Exporting metadata from `util_test`
DROP DATABASE IF EXISTS `util_test`;
CREATE DATABASE `util_test`;
USE `util_test`;
# TABLE: `util_test`.`t1`
CREATE TABLE `t1` (
  `a` char(30) DEFAULT NULL
# #if (server1 != 'MySQL') or (int(version1) < 80000)
) ENGINE=MEMORY DEFAULT CHARSET=latin1;
# #else
) ENGINE=MEMORY DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `util_test`.`t2`
CREATE TABLE `t2` (
  `a` char(30) DEFAULT NULL
# #if (server1 != 'MySQL') or (int(version1) < 80000)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
# #else
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `util_test`.`t3`
# #if (server1 != 'MySQL') or (int(version1) < 80000)
CREATE TABLE `t3` (
  `a` int(11) NOT NULL AUTO_INCREMENT,
  `b` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`a`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
# #else
CREATE TABLE `t3` (
  `a` int NOT NULL AUTO_INCREMENT,
  `b` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`a`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `util_test`.`t4`
# #if (server1 != 'MySQL') or (int(version1) < 80000)
CREATE TABLE `t4` (
  `c` int(11) NOT NULL,
  `d` int(11) NOT NULL,
  KEY `ref_t3` (`c`),
  CONSTRAINT `ref_t3` FOREIGN KEY (`c`) REFERENCES `t3` (`a`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
# #else
CREATE TABLE `t4` (
  `c` int NOT NULL,
  `d` int NOT NULL,
  KEY `ref_t3` (`c`),
  CONSTRAINT `ref_t3` FOREIGN KEY (`c`) REFERENCES `t3` (`a`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `util_test`.`t5`
# #if (server1 != 'MySQL') or (int(version1) < 80000)
CREATE TABLE `t5` (
  `product_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) DEFAULT NULL,
  `base_price` decimal(20,2) unsigned DEFAULT NULL,
  `tax_percentage` decimal(3,0) unsigned DEFAULT NULL,
  PRIMARY KEY (`product_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
# #else
CREATE TABLE `t5` (
  `product_id` int unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) DEFAULT NULL,
  `base_price` decimal(20,2) unsigned DEFAULT NULL,
  `tax_percentage` decimal(3,0) unsigned DEFAULT NULL,
  PRIMARY KEY (`product_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# FUNCTION: `util_test`.`f1`
DELIMITER ||
# #if (server1 != 'MySQL') or (int(version1) < 80000)
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `f1`() RETURNS int(11)
# #else
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `f1`() RETURNS int
# #endif
    DETERMINISTIC
RETURN (SELECT 1);
||
DELIMITER ;
# FUNCTION: `util_test`.`f2`
DELIMITER ||
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `f2`(base_price DECIMAL(20,2) UNSIGNED, tax_percentage DECIMAL(3,0) UNSIGNED) RETURNS decimal(21,2) unsigned
    DETERMINISTIC
RETURN base_price + base_price*(tax_percentage/100);
||
DELIMITER ;
# PROCEDURE: `util_test`.`p1`
DELIMITER ||
CREATE DEFINER=`XXXX`@`XXXXXXXXX` PROCEDURE `p1`(p1 CHAR(20))
INSERT INTO util_test.t1 VALUES ("50");
||
DELIMITER ;
# VIEW: `util_test`.`v1`
CREATE ALGORITHM=UNDEFINED DEFINER=`XXXX`@`XXXXXXXXX` SQL SECURITY DEFINER VIEW `v1` AS select `t1`.`a` AS `a` from `t1`;
# VIEW: `util_test`.`v2`
CREATE ALGORITHM=UNDEFINED DEFINER=`XXXX`@`XXXXXXXXX` SQL SECURITY DEFINER VIEW `v2` AS select `t5`.`name` AS `name`,`util_test`.`f2`(`t5`.`base_price`,`t5`.`tax_percentage`) AS `price` from `t5`;
# TRIGGER: `util_test`.`trg`
DELIMITER ||
# #if (server1 != 'MySQL') or (int(version1) < 80000)
CREATE DEFINER=`XXXX`@`XXXXXXXXX` TRIGGER util_test.trg AFTER INSERT ON util_test.t1 FOR EACH ROW INSERT INTO util_test.t2 VALUES('Test objects count');
# #else
CREATE DEFINER=`XXXX`@`XXXXXXXXX` TRIGGER `trg` AFTER INSERT ON `t1` FOR EACH ROW INSERT INTO util_test.t2 VALUES('Test objects count');
# #endif
||
DELIMITER ;
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT ALTER ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT ALTER ROUTINE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE ROUTINE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE TEMPORARY TABLES ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE VIEW ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT DELETE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT DROP ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT EVENT ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT EXECUTE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT INDEX ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT INSERT ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT LOCK TABLES ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT REFERENCES ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT SELECT ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT SHOW VIEW ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT TRIGGER ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT UPDATE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT ALTER ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT ALTER ROUTINE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE ROUTINE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE TEMPORARY TABLES ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE VIEW ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT DELETE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT DROP ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT EVENT ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT EXECUTE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT INDEX ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT INSERT ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT LOCK TABLES ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT REFERENCES ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT SELECT ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT SHOW VIEW ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT TRIGGER ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT UPDATE ON `util_test`.* TO 'joe_wildcard'@'%';
#...done.
USE `util_test`;
# Exporting data from `util_test`
# Data for table `util_test`.`t1`:
INSERT INTO `util_test`.`t1` VALUES ('01 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('02 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('03 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('04 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('05 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('06 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('07 Test Basic database example');
# Data for table `util_test`.`t2`:
INSERT INTO `util_test`.`t2` VALUES ('11 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES ('12 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES ('13 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES (NULL);
# Data for table `util_test`.`t3`:
INSERT INTO `util_test`.`t3` VALUES (1, '14 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (2, '15 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (3, '16 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (4, NULL);
# Data for table `util_test`.`t4`:
INSERT INTO `util_test`.`t4` VALUES (3, 2);
# Data for table `util_test`.`t5`:
INSERT INTO `util_test`.`t5` VALUES (1, 'kitkat', 0.99, 19);
INSERT INTO `util_test`.`t5` VALUES (2, 'M&M', 5.99, 19);
INSERT INTO `util_test`.`t5` VALUES (3, 'milk', 0.67, 5);
INSERT INTO `util_test`.`t5` VALUES (4, 'Dr. Pepper', 0.99, 19);
#...done.
SET FOREIGN_KEY_CHECKS=1;
Test case 5 - export data and metadata with quiet
# WARNING: Using a password on the command line interface can be insecure.
SET FOREIGN_KEY_CHECKS=0;
DROP DATABASE IF EXISTS `util_test`;
CREATE DATABASE `util_test`;
USE `util_test`;
CREATE TABLE `t1` (
  `a` char(30) DEFAULT NULL
# #if (server1 != 'MySQL') or (int(version1) < 80000)
) ENGINE=MEMORY DEFAULT CHARSET=latin1;
# #else
) ENGINE=MEMORY DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
CREATE TABLE `t2` (
  `a` char(30) DEFAULT NULL
# #if (server1 != 'MySQL') or (int(version1) < 80000)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
# #else
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# #if (server1 != 'MySQL') or (int(version1) < 80000)
CREATE TABLE `t3` (
  `a` int(11) NOT NULL AUTO_INCREMENT,
  `b` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`a`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
# #else
CREATE TABLE `t3` (
  `a` int NOT NULL AUTO_INCREMENT,
  `b` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`a`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# #if (server1 != 'MySQL') or (int(version1) < 80000)
CREATE TABLE `t4` (
  `c` int(11) NOT NULL,
  `d` int(11) NOT NULL,
  KEY `ref_t3` (`c`),
  CONSTRAINT `ref_t3` FOREIGN KEY (`c`) REFERENCES `t3` (`a`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
# #else
CREATE TABLE `t4` (
  `c` int NOT NULL,
  `d` int NOT NULL,
  KEY `ref_t3` (`c`),
  CONSTRAINT `ref_t3` FOREIGN KEY (`c`) REFERENCES `t3` (`a`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# #if (server1 != 'MySQL') or (int(version1) < 80000)
CREATE TABLE `t5` (
  `product_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) DEFAULT NULL,
  `base_price` decimal(20,2) unsigned DEFAULT NULL,
  `tax_percentage` decimal(3,0) unsigned DEFAULT NULL,
  PRIMARY KEY (`product_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
# #else
CREATE TABLE `t5` (
  `product_id` int unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) DEFAULT NULL,
  `base_price` decimal(20,2) unsigned DEFAULT NULL,
  `tax_percentage` decimal(3,0) unsigned DEFAULT NULL,
  PRIMARY KEY (`product_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
DELIMITER ||
# #if (server1 != 'MySQL') or (int(version1) < 80000)
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `f1`() RETURNS int(11)
# #else
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `f1`() RETURNS int
# #endif
    DETERMINISTIC
RETURN (SELECT 1);
||
DELIMITER ;
DELIMITER ||
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `f2`(base_price DECIMAL(20,2) UNSIGNED, tax_percentage DECIMAL(3,0) UNSIGNED) RETURNS decimal(21,2) unsigned
    DETERMINISTIC
RETURN base_price + base_price*(tax_percentage/100);
||
DELIMITER ;
DELIMITER ||
CREATE DEFINER=`XXXX`@`XXXXXXXXX` PROCEDURE `p1`(p1 CHAR(20))
INSERT INTO util_test.t1 VALUES ("50");
||
DELIMITER ;
CREATE ALGORITHM=UNDEFINED DEFINER=`XXXX`@`XXXXXXXXX` SQL SECURITY DEFINER VIEW `v1` AS select `t1`.`a` AS `a` from `t1`;
CREATE ALGORITHM=UNDEFINED DEFINER=`XXXX`@`XXXXXXXXX` SQL SECURITY DEFINER VIEW `v2` AS select `t5`.`name` AS `name`,`util_test`.`f2`(`t5`.`base_price`,`t5`.`tax_percentage`) AS `price` from `t5`;
DELIMITER ||
# #if (server1 != 'MySQL') or (int(version1) < 80000)
CREATE DEFINER=`XXXX`@`XXXXXXXXX` TRIGGER util_test.trg AFTER INSERT ON util_test.t1 FOR EACH ROW INSERT INTO util_test.t2 VALUES('Test objects count');
# #else
CREATE DEFINER=`XXXX`@`XXXXXXXXX` TRIGGER `trg` AFTER INSERT ON `t1` FOR EACH ROW INSERT INTO util_test.t2 VALUES('Test objects count');
# #endif
||
DELIMITER ;
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT ALTER ON `util_test`.* TO 'joe'@'user';
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT ALTER ROUTINE ON `util_test`.* TO 'joe'@'user';
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE ON `util_test`.* TO 'joe'@'user';
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE ROUTINE ON `util_test`.* TO 'joe'@'user';
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE TEMPORARY TABLES ON `util_test`.* TO 'joe'@'user';
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE VIEW ON `util_test`.* TO 'joe'@'user';
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT DELETE ON `util_test`.* TO 'joe'@'user';
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT DROP ON `util_test`.* TO 'joe'@'user';
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT EVENT ON `util_test`.* TO 'joe'@'user';
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT EXECUTE ON `util_test`.* TO 'joe'@'user';
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT INDEX ON `util_test`.* TO 'joe'@'user';
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT INSERT ON `util_test`.* TO 'joe'@'user';
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT LOCK TABLES ON `util_test`.* TO 'joe'@'user';
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT REFERENCES ON `util_test`.* TO 'joe'@'user';
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT SELECT ON `util_test`.* TO 'joe'@'user';
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT SHOW VIEW ON `util_test`.* TO 'joe'@'user';
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT TRIGGER ON `util_test`.* TO 'joe'@'user';
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT UPDATE ON `util_test`.* TO 'joe'@'user';
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT ALTER ON `util_test`.* TO 'joe_wildcard'@'%';
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT ALTER ROUTINE ON `util_test`.* TO 'joe_wildcard'@'%';
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE ON `util_test`.* TO 'joe_wildcard'@'%';
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE ROUTINE ON `util_test`.* TO 'joe_wildcard'@'%';
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE TEMPORARY TABLES ON `util_test`.* TO 'joe_wildcard'@'%';
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE VIEW ON `util_test`.* TO 'joe_wildcard'@'%';
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT DELETE ON `util_test`.* TO 'joe_wildcard'@'%';
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT DROP ON `util_test`.* TO 'joe_wildcard'@'%';
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT EVENT ON `util_test`.* TO 'joe_wildcard'@'%';
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT EXECUTE ON `util_test`.* TO 'joe_wildcard'@'%';
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT INDEX ON `util_test`.* TO 'joe_wildcard'@'%';
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT INSERT ON `util_test`.* TO 'joe_wildcard'@'%';
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT LOCK TABLES ON `util_test`.* TO 'joe_wildcard'@'%';
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT REFERENCES ON `util_test`.* TO 'joe_wildcard'@'%';
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT SELECT ON `util_test`.* TO 'joe_wildcard'@'%';
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT SHOW VIEW ON `util_test`.* TO 'joe_wildcard'@'%';
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT TRIGGER ON `util_test`.* TO 'joe_wildcard'@'%';
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
# Data for table `util_test`.`t1`:
INSERT INTO `util_test`.`t1` VALUES ('01 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('02 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('03 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('04 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('05 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('06 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('07 Test Basic database example');
# Data for table `util_test`.`t2`:
INSERT INTO `util_test`.`t2` VALUES ('11 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES ('12 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES ('13 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES (NULL);
# Data for table `util_test`.`t3`:
INSERT INTO `util_test`.`t3` VALUES (1, '14 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (2, '15 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (3, '16 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (4, NULL);
# Data for table `util_test`.`t4`:
INSERT INTO `util_test`.`t4` VALUES (3, 2);
# Data for table `util_test`.`t5`:
INSERT INTO `util_test`.`t5` VALUES (1, 'kitkat', 0.99, 19);
INSERT INTO `util_test`.`t5` VALUES (2, 'M&M', 5.99, 19);
INSERT INTO `util_test`.`t5` VALUES (3, 'milk', 0.67, 5);
INSERT INTO `util_test`.`t5` VALUES (4, 'Dr. Pepper', 0.99, 19);
SET FOREIGN_KEY_CHECKS=1;
Test case 6 - export data and metadata with debug
# WARNING: Using a password on the command line interface can be insecure.
# Source on localhost: ... connected.
#
SET FOREIGN_KEY_CHECKS=0;
#
# Exporting metadata from `util_test`
DROP DATABASE IF EXISTS `util_test`;
CREATE DATABASE `util_test`;
USE `util_test`;
# TABLE: `util_test`.`t1`
CREATE TABLE `t1` (
  `a` char(30) DEFAULT NULL
# #if (server1 != 'MySQL') or (int(version1) < 80000)
) ENGINE=MEMORY DEFAULT CHARSET=latin1;
# #else
) ENGINE=MEMORY DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `util_test`.`t2`
CREATE TABLE `t2` (
  `a` char(30) DEFAULT NULL
# #if (server1 != 'MySQL') or (int(version1) < 80000)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
# #else
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `util_test`.`t3`
CREATE TABLE `t3` (
# #if (server1 != 'MySQL') or (int(version1) < 80000)
  `a` int(11) NOT NULL AUTO_INCREMENT,
  `b` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`a`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
# #else
  `a` int NOT NULL AUTO_INCREMENT,
  `b` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`a`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `util_test`.`t4`
CREATE TABLE `t4` (
# #if (server1 != 'MySQL') or (int(version1) < 80000)
  `c` int(11) NOT NULL,
  `d` int(11) NOT NULL,
  KEY `ref_t3` (`c`),
  CONSTRAINT `ref_t3` FOREIGN KEY (`c`) REFERENCES `t3` (`a`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
# #else
  `c` int NOT NULL,
  `d` int NOT NULL,
  KEY `ref_t3` (`c`),
  CONSTRAINT `ref_t3` FOREIGN KEY (`c`) REFERENCES `t3` (`a`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `util_test`.`t5`
CREATE TABLE `t5` (
# #if (server1 != 'MySQL') or (int(version1) < 80000)
  `product_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) DEFAULT NULL,
  `base_price` decimal(20,2) unsigned DEFAULT NULL,
  `tax_percentage` decimal(3,0) unsigned DEFAULT NULL,
  PRIMARY KEY (`product_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
# #else
  `product_id` int unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) DEFAULT NULL,
  `base_price` decimal(20,2) unsigned DEFAULT NULL,
  `tax_percentage` decimal(3,0) unsigned DEFAULT NULL,
  PRIMARY KEY (`product_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# FUNCTION: `util_test`.`f1`
DELIMITER ||
# #if (server1 != 'MySQL') or (int(version1) < 80000)
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `f1`() RETURNS int(11)
# #else
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `f1`() RETURNS int
# #endif
    DETERMINISTIC
RETURN (SELECT 1);
||
DELIMITER ;
# FUNCTION: `util_test`.`f2`
DELIMITER ||
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `f2`(base_price DECIMAL(20,2) UNSIGNED, tax_percentage DECIMAL(3,0) UNSIGNED) RETURNS decimal(21,2) unsigned
    DETERMINISTIC
RETURN base_price + base_price*(tax_percentage/100);
||
DELIMITER ;
# PROCEDURE: `util_test`.`p1`
DELIMITER ||
CREATE DEFINER=`XXXX`@`XXXXXXXXX` PROCEDURE `p1`(p1 CHAR(20))
INSERT INTO util_test.t1 VALUES ("50");
||
DELIMITER ;
# VIEW: `util_test`.`v1`
CREATE ALGORITHM=UNDEFINED DEFINER=`XXXX`@`XXXXXXXXX` SQL SECURITY DEFINER VIEW `v1` AS select `t1`.`a` AS `a` from `t1`;
# VIEW: `util_test`.`v2`
CREATE ALGORITHM=UNDEFINED DEFINER=`XXXX`@`XXXXXXXXX` SQL SECURITY DEFINER VIEW `v2` AS select `t5`.`name` AS `name`,`util_test`.`f2`(`t5`.`base_price`,`t5`.`tax_percentage`) AS `price` from `t5`;
# TRIGGER: `util_test`.`trg`
DELIMITER ||
# #if (server1 != 'MySQL') or (int(version1) < 80000)
CREATE DEFINER=`XXXX`@`XXXXXXXXX` TRIGGER util_test.trg AFTER INSERT ON util_test.t1 FOR EACH ROW INSERT INTO util_test.t2 VALUES('Test objects count');
# #else
CREATE DEFINER=`XXXX`@`XXXXXXXXX` TRIGGER `trg` AFTER INSERT ON `t1` FOR EACH ROW INSERT INTO util_test.t2 VALUES('Test objects count');
# #endif
||
DELIMITER ;
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT ALTER ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT ALTER ROUTINE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE ROUTINE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE TEMPORARY TABLES ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE VIEW ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT DELETE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT DROP ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT EVENT ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT EXECUTE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT INDEX ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT INSERT ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT LOCK TABLES ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT REFERENCES ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT SELECT ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT SHOW VIEW ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT TRIGGER ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT UPDATE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT ALTER ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT ALTER ROUTINE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE ROUTINE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE TEMPORARY TABLES ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE VIEW ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT DELETE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT DROP ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT EVENT ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT EXECUTE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT INDEX ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT INSERT ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT LOCK TABLES ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT REFERENCES ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT SELECT ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT SHOW VIEW ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT TRIGGER ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT UPDATE ON `util_test`.* TO 'joe_wildcard'@'%';
#...done.
USE `util_test`;
# Exporting data from `util_test`
# Data for table `util_test`.`t1`:
INSERT INTO `util_test`.`t1` VALUES ('01 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('02 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('03 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('04 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('05 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('06 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('07 Test Basic database example');
# Data for table `util_test`.`t2`:
INSERT INTO `util_test`.`t2` VALUES ('11 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES ('12 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES ('13 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES (NULL);
# Data for table `util_test`.`t3`:
INSERT INTO `util_test`.`t3` VALUES (1, '14 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (2, '15 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (3, '16 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (4, NULL);
# Data for table `util_test`.`t4`:
INSERT INTO `util_test`.`t4` VALUES (3, 2);
# Data for table `util_test`.`t5`:
INSERT INTO `util_test`.`t5` VALUES (1, 'kitkat', 0.99, 19);
INSERT INTO `util_test`.`t5` VALUES (2, 'M&M', 5.99, 19);
INSERT INTO `util_test`.`t5` VALUES (3, 'milk', 0.67, 5);
INSERT INTO `util_test`.`t5` VALUES (4, 'Dr. Pepper', 0.99, 19);
#...done.
#
SET FOREIGN_KEY_CHECKS=1;
#
Time:       XXXXXX

Test case 7 - export data and metadata with multiprocessing (2 processes).
# WARNING: Using a password on the command line interface can be insecure.
# Source on localhost: ... connected.
SET FOREIGN_KEY_CHECKS=0;
# Exporting metadata from `util_test`
DROP DATABASE IF EXISTS `util_test`;
CREATE DATABASE `util_test`;
USE `util_test`;
# TABLE: `util_test`.`t1`
CREATE TABLE `t1` (
  `a` char(30) DEFAULT NULL
# #if (server1 != 'MySQL') or (int(version1) < 80000)
) ENGINE=MEMORY DEFAULT CHARSET=latin1;
# #else
) ENGINE=MEMORY DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `util_test`.`t2`
CREATE TABLE `t2` (
  `a` char(30) DEFAULT NULL
# #if (server1 != 'MySQL') or (int(version1) < 80000)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
# #else
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `util_test`.`t3`
CREATE TABLE `t3` (
# #if (server1 != 'MySQL') or (int(version1) < 80000)
  `a` int(11) NOT NULL AUTO_INCREMENT,
  `b` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`a`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
# #else
  `a` int NOT NULL AUTO_INCREMENT,
  `b` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`a`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `util_test`.`t4`
CREATE TABLE `t4` (
# #if (server1 != 'MySQL') or (int(version1) < 80000)
  `c` int(11) NOT NULL,
  `d` int(11) NOT NULL,
  KEY `ref_t3` (`c`),
  CONSTRAINT `ref_t3` FOREIGN KEY (`c`) REFERENCES `t3` (`a`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
# #else
  `c` int NOT NULL,
  `d` int NOT NULL,
  KEY `ref_t3` (`c`),
  CONSTRAINT `ref_t3` FOREIGN KEY (`c`) REFERENCES `t3` (`a`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `util_test`.`t5`
CREATE TABLE `t5` (
# #if (server1 != 'MySQL') or (int(version1) < 80000)
  `product_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) DEFAULT NULL,
  `base_price` decimal(20,2) unsigned DEFAULT NULL,
  `tax_percentage` decimal(3,0) unsigned DEFAULT NULL,
  PRIMARY KEY (`product_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
# #else
  `product_id` int unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) DEFAULT NULL,
  `base_price` decimal(20,2) unsigned DEFAULT NULL,
  `tax_percentage` decimal(3,0) unsigned DEFAULT NULL,
  PRIMARY KEY (`product_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# FUNCTION: `util_test`.`f1`
DELIMITER ||
# #if (server1 != 'MySQL') or (int(version1) < 80000)
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `f1`() RETURNS int(11)
# #else
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `f1`() RETURNS int
# #endif
    DETERMINISTIC
RETURN (SELECT 1);
||
DELIMITER ;
# FUNCTION: `util_test`.`f2`
DELIMITER ||
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `f2`(base_price DECIMAL(20,2) UNSIGNED, tax_percentage DECIMAL(3,0) UNSIGNED) RETURNS decimal(21,2) unsigned
    DETERMINISTIC
RETURN base_price + base_price*(tax_percentage/100);
||
DELIMITER ;
# PROCEDURE: `util_test`.`p1`
DELIMITER ||
CREATE DEFINER=`XXXX`@`XXXXXXXXX` PROCEDURE `p1`(p1 CHAR(20))
INSERT INTO util_test.t1 VALUES ("50");
||
DELIMITER ;
# VIEW: `util_test`.`v1`
CREATE ALGORITHM=UNDEFINED DEFINER=`XXXX`@`XXXXXXXXX` SQL SECURITY DEFINER VIEW `v1` AS select `t1`.`a` AS `a` from `t1`;
# VIEW: `util_test`.`v2`
CREATE ALGORITHM=UNDEFINED DEFINER=`XXXX`@`XXXXXXXXX` SQL SECURITY DEFINER VIEW `v2` AS select `t5`.`name` AS `name`,`util_test`.`f2`(`t5`.`base_price`,`t5`.`tax_percentage`) AS `price` from `t5`;
# TRIGGER: `util_test`.`trg`
DELIMITER ||
# #if (server1 != 'MySQL') or (int(version1) < 80000)
CREATE DEFINER=`XXXX`@`XXXXXXXXX` TRIGGER util_test.trg AFTER INSERT ON util_test.t1 FOR EACH ROW INSERT INTO util_test.t2 VALUES('Test objects count');
# #else
CREATE DEFINER=`XXXX`@`XXXXXXXXX` TRIGGER `trg` AFTER INSERT ON `t1` FOR EACH ROW INSERT INTO util_test.t2 VALUES('Test objects count');
# #endif
||
DELIMITER ;
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT ALTER ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT ALTER ROUTINE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE ROUTINE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE TEMPORARY TABLES ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE VIEW ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT DELETE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT DROP ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT EVENT ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT EXECUTE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT INDEX ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT INSERT ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT LOCK TABLES ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT REFERENCES ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT SELECT ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT SHOW VIEW ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT TRIGGER ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT UPDATE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT ALTER ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT ALTER ROUTINE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE ROUTINE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE TEMPORARY TABLES ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE VIEW ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT DELETE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT DROP ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT EVENT ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT EXECUTE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT INDEX ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT INSERT ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT LOCK TABLES ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT REFERENCES ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT SELECT ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT SHOW VIEW ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT TRIGGER ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT UPDATE ON `util_test`.* TO 'joe_wildcard'@'%';
#...done.
USE `util_test`;
# Exporting data from `util_test`
# Data for table `util_test`.`t1`:
INSERT INTO `util_test`.`t1` VALUES ('01 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('02 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('03 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('04 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('05 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('06 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('07 Test Basic database example');
# Data for table `util_test`.`t2`:
INSERT INTO `util_test`.`t2` VALUES ('11 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES ('12 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES ('13 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES (NULL);
# Data for table `util_test`.`t3`:
INSERT INTO `util_test`.`t3` VALUES (1, '14 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (2, '15 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (3, '16 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (4, NULL);
# Data for table `util_test`.`t4`:
INSERT INTO `util_test`.`t4` VALUES (3, 2);
# Data for table `util_test`.`t5`:
INSERT INTO `util_test`.`t5` VALUES (1, 'kitkat', 0.99, 19);
INSERT INTO `util_test`.`t5` VALUES (2, 'M&M', 5.99, 19);
INSERT INTO `util_test`.`t5` VALUES (3, 'milk', 0.67, 5);
INSERT INTO `util_test`.`t5` VALUES (4, 'Dr. Pepper', 0.99, 19);
#...done.
SET FOREIGN_KEY_CHECKS=1;
Test case 8 - export data and metadata to output file.
# WARNING: Using a password on the command line interface can be insecure.
# Source on localhost: ... connected.
Output file results:
SET FOREIGN_KEY_CHECKS=0;
# Exporting metadata from `util_test`
DROP DATABASE IF EXISTS `util_test`;
CREATE DATABASE `util_test`;
USE `util_test`;
# TABLE: `util_test`.`t1`
CREATE TABLE `t1` (
  `a` char(30) DEFAULT NULL
# #if (server1 != 'MySQL') or (int(version1) < 80000)
) ENGINE=MEMORY DEFAULT CHARSET=latin1;
# #else
) ENGINE=MEMORY DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `util_test`.`t2`
CREATE TABLE `t2` (
  `a` char(30) DEFAULT NULL
# #if (server1 != 'MySQL') or (int(version1) < 80000)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
# #else
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `util_test`.`t3`
CREATE TABLE `t3` (
# #if (server1 != 'MySQL') or (int(version1) < 80000)
  `a` int(11) NOT NULL AUTO_INCREMENT,
  `b` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`a`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
# #else
  `a` int NOT NULL AUTO_INCREMENT,
  `b` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`a`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `util_test`.`t4`
CREATE TABLE `t4` (
# #if (server1 != 'MySQL') or (int(version1) < 80000)
  `c` int(11) NOT NULL,
  `d` int(11) NOT NULL,
  KEY `ref_t3` (`c`),
  CONSTRAINT `ref_t3` FOREIGN KEY (`c`) REFERENCES `t3` (`a`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
# #else
  `c` int NOT NULL,
  `d` int NOT NULL,
  KEY `ref_t3` (`c`),
  CONSTRAINT `ref_t3` FOREIGN KEY (`c`) REFERENCES `t3` (`a`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `util_test`.`t5`
CREATE TABLE `t5` (
# #if (server1 != 'MySQL') or (int(version1) < 80000)
  `product_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) DEFAULT NULL,
  `base_price` decimal(20,2) unsigned DEFAULT NULL,
  `tax_percentage` decimal(3,0) unsigned DEFAULT NULL,
  PRIMARY KEY (`product_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
# #else
  `product_id` int unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) DEFAULT NULL,
  `base_price` decimal(20,2) unsigned DEFAULT NULL,
  `tax_percentage` decimal(3,0) unsigned DEFAULT NULL,
  PRIMARY KEY (`product_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# FUNCTION: `util_test`.`f1`
DELIMITER ||
# #if (server1 != 'MySQL') or (int(version1) < 80000)
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `f1`() RETURNS int(11)
# #else
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `f1`() RETURNS int
# #endif
    DETERMINISTIC
RETURN (SELECT 1);
||
DELIMITER ;
# FUNCTION: `util_test`.`f2`
DELIMITER ||
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `f2`(base_price DECIMAL(20,2) UNSIGNED, tax_percentage DECIMAL(3,0) UNSIGNED) RETURNS decimal(21,2) unsigned
    DETERMINISTIC
RETURN base_price + base_price*(tax_percentage/100);
||
DELIMITER ;
# PROCEDURE: `util_test`.`p1`
DELIMITER ||
CREATE DEFINER=`XXXX`@`XXXXXXXXX` PROCEDURE `p1`(p1 CHAR(20))
INSERT INTO util_test.t1 VALUES ("50");
||
DELIMITER ;
# VIEW: `util_test`.`v1`
CREATE ALGORITHM=UNDEFINED DEFINER=`XXXX`@`XXXXXXXXX` SQL SECURITY DEFINER VIEW `v1` AS select `t1`.`a` AS `a` from `t1`;
# VIEW: `util_test`.`v2`
CREATE ALGORITHM=UNDEFINED DEFINER=`XXXX`@`XXXXXXXXX` SQL SECURITY DEFINER VIEW `v2` AS select `t5`.`name` AS `name`,`util_test`.`f2`(`t5`.`base_price`,`t5`.`tax_percentage`) AS `price` from `t5`;
# TRIGGER: `util_test`.`trg`
DELIMITER ||
# #if (server1 != 'MySQL') or (int(version1) < 80000)
CREATE DEFINER=`XXXX`@`XXXXXXXXX` TRIGGER util_test.trg AFTER INSERT ON util_test.t1 FOR EACH ROW INSERT INTO util_test.t2 VALUES('Test objects count');
# #else
CREATE DEFINER=`XXXX`@`XXXXXXXXX` TRIGGER `trg` AFTER INSERT ON `t1` FOR EACH ROW INSERT INTO util_test.t2 VALUES('Test objects count');
# #endif
||
DELIMITER ;
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT ALTER ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT ALTER ROUTINE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE ROUTINE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE TEMPORARY TABLES ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE VIEW ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT DELETE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT DROP ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT EVENT ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT EXECUTE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT INDEX ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT INSERT ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT LOCK TABLES ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT REFERENCES ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT SELECT ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT SHOW VIEW ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT TRIGGER ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT UPDATE ON `util_test`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT ALTER ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT ALTER ROUTINE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE ROUTINE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE TEMPORARY TABLES ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT CREATE VIEW ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT DELETE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT DROP ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT EVENT ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT EXECUTE ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT INDEX ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT INSERT ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT LOCK TABLES ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT REFERENCES ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT SELECT ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT SHOW VIEW ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT TRIGGER ON `util_test`.* TO 'joe_wildcard'@'%';
# Grant:
CREATE USER IF NOT EXISTS 'joe_wildcard'@'%';
GRANT UPDATE ON `util_test`.* TO 'joe_wildcard'@'%';
#...done.
USE `util_test`;
# Exporting data from `util_test`
# Data for table `util_test`.`t1`:
INSERT INTO `util_test`.`t1` VALUES ('01 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('02 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('03 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('04 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('05 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('06 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('07 Test Basic database example');
# Data for table `util_test`.`t2`:
INSERT INTO `util_test`.`t2` VALUES ('11 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES ('12 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES ('13 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES (NULL);
# Data for table `util_test`.`t3`:
INSERT INTO `util_test`.`t3` VALUES (1, '14 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (2, '15 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (3, '16 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (4, NULL);
# Data for table `util_test`.`t4`:
INSERT INTO `util_test`.`t4` VALUES (3, 2);
# Data for table `util_test`.`t5`:
INSERT INTO `util_test`.`t5` VALUES (1, 'kitkat', 0.99, 19);
INSERT INTO `util_test`.`t5` VALUES (2, 'M&M', 5.99, 19);
INSERT INTO `util_test`.`t5` VALUES (3, 'milk', 0.67, 5);
INSERT INTO `util_test`.`t5` VALUES (4, 'Dr. Pepper', 0.99, 19);
#...done.
SET FOREIGN_KEY_CHECKS=1;
Test case 9 - export database with weird names (backticks)
# WARNING: Using a password on the command line interface can be insecure.
# Source on localhost: ... connected.
# Exporting metadata from `db``:db`
DROP DATABASE IF EXISTS `db``:db`;
CREATE DATABASE `db``:db`;
USE `db``:db`;
# TABLE: `db``:db`.```t``.``export_2`
CREATE TABLE ```t``.``export_2` (
# #if (server1 != 'MySQL') or (int(version1) < 80000)
  `id``` int(11) NOT NULL AUTO_INCREMENT,
  `other` char(30) DEFAULT NULL,
  PRIMARY KEY (`id```)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
# #else
  `id``` int NOT NULL AUTO_INCREMENT,
  `other` char(30) DEFAULT NULL,
  PRIMARY KEY (`id```)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `db``:db`.```t``export_1`
CREATE TABLE ```t``export_1` (
# #if (server1 != 'MySQL') or (int(version1) < 80000)
  `id``` int(11) NOT NULL AUTO_INCREMENT,
  `other` char(30) DEFAULT NULL,
  PRIMARY KEY (`id```)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
# #else
  `id``` int NOT NULL AUTO_INCREMENT,
  `other` char(30) DEFAULT NULL,
  PRIMARY KEY (`id```)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# FUNCTION: `db``:db`.`fu``nc`
DELIMITER ||
# #if (server1 != 'MySQL') or (int(version1) < 80000)
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `fu``nc`(`a``` TEXT) RETURNS text CHARSET latin1
# #else
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `fu``nc`(`a``` TEXT) RETURNS text CHARSET utf8mb4
# #endif
    DETERMINISTIC
RETURN `a```;
||
DELIMITER ;
# PROCEDURE: `db``:db`.`pr````oc`
DELIMITER ||
CREATE DEFINER=`XXXX`@`XXXXXXXXX` PROCEDURE `pr````oc`()
INSERT INTO `db``:db`.```t``export_1` (other) VALUES ("proc->trigger->func");
||
DELIMITER ;
# VIEW: `db``:db`.```v``export_1`
CREATE ALGORITHM=UNDEFINED DEFINER=`XXXX`@`XXXXXXXXX` SQL SECURITY DEFINER VIEW ```v``export_1` AS select ```t``export_1`.`id``` AS `id```,```t``export_1`.`other` AS `other` from ```t``export_1`;
# EVENT: `db``:db`.```e``export_1`
DELIMITER ||
CREATE EVENT ```e``export_1` ON SCHEDULE EVERY 1 YEAR STARTS [...]
||
DELIMITER ;
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT ALTER ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT ALTER ROUTINE ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE ROUTINE ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE TEMPORARY TABLES ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE VIEW ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT DELETE ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT DROP ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT EVENT ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT EXECUTE ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT INDEX ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT INSERT ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT LOCK TABLES ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT REFERENCES ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT SELECT ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT SHOW VIEW ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT TRIGGER ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT UPDATE ON `db``:db`.* TO 'joe'@'user';
#...done.
USE `db``:db`;
# Exporting data from `db``:db`
# Data for table `db``:db`.```t``.``export_2`:
INSERT INTO `db``:db`.```t``.``export_2` VALUES (1, '@`var`.`var`');
# Data for table `db``:db`.```t``export_1`:
INSERT INTO `db``:db`.```t``export_1` VALUES (1, '@`var``var`');
#...done.
Test case 10 - export data with special characters
# WARNING: Using a password on the command line interface can be insecure.
# Source on localhost: ... connected.
# Exporting metadata from `db``:db`
DROP DATABASE IF EXISTS `db``:db`;
CREATE DATABASE `db``:db`;
USE `db``:db`;
# TABLE: `db``:db`.```t``.``export_2`
CREATE TABLE ```t``.``export_2` (
# #if (server1 != 'MySQL') or (int(version1) < 80000)
  `id``` int(11) NOT NULL AUTO_INCREMENT,
  `other` char(30) DEFAULT NULL,
  PRIMARY KEY (`id```)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
# #else
  `id``` int NOT NULL AUTO_INCREMENT,
  `other` char(30) DEFAULT NULL,
  PRIMARY KEY (`id```)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# TABLE: `db``:db`.```t``export_1`
CREATE TABLE ```t``export_1` (
# #if (server1 != 'MySQL') or (int(version1) < 80000)
  `id``` int(11) NOT NULL AUTO_INCREMENT,
  `other` char(30) DEFAULT NULL,
  PRIMARY KEY (`id```)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;
# #else
  `id``` int NOT NULL AUTO_INCREMENT,
  `other` char(30) DEFAULT NULL,
  PRIMARY KEY (`id```)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
# FUNCTION: `db``:db`.`fu``nc`
DELIMITER ||
# #if (server1 != 'MySQL') or (int(version1) < 80000)
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `fu``nc`(`a``` TEXT) RETURNS text CHARSET latin1
# #else
CREATE DEFINER=`XXXX`@`XXXXXXXXX` FUNCTION `fu``nc`(`a``` TEXT) RETURNS text CHARSET utf8mb4
# #endif
    DETERMINISTIC
RETURN `a```;
||
DELIMITER ;
# PROCEDURE: `db``:db`.`pr````oc`
DELIMITER ||
CREATE DEFINER=`XXXX`@`XXXXXXXXX` PROCEDURE `pr````oc`()
INSERT INTO `db``:db`.```t``export_1` (other) VALUES ("proc->trigger->func");
||
DELIMITER ;
# VIEW: `db``:db`.```v``export_1`
CREATE ALGORITHM=UNDEFINED DEFINER=`XXXX`@`XXXXXXXXX` SQL SECURITY DEFINER VIEW ```v``export_1` AS select ```t``export_1`.`id``` AS `id```,```t``export_1`.`other` AS `other` from ```t``export_1`;
# EVENT: `db``:db`.```e``export_1`
DELIMITER ||
CREATE EVENT ```e``export_1` ON SCHEDULE EVERY 1 YEAR STARTS [...]
||
DELIMITER ;
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT ALTER ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT ALTER ROUTINE ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE ROUTINE ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE TEMPORARY TABLES ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT CREATE VIEW ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT DELETE ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT DROP ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT EVENT ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT EXECUTE ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT INDEX ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT INSERT ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT LOCK TABLES ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT REFERENCES ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT SELECT ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT SHOW VIEW ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT TRIGGER ON `db``:db`.* TO 'joe'@'user';
# Grant:
CREATE USER IF NOT EXISTS 'joe'@'user';
GRANT UPDATE ON `db``:db`.* TO 'joe'@'user';
#...done.
USE `db``:db`;
# Exporting data from `db``:db`
# Data for table `db``:db`.```t``.``export_2`:
INSERT INTO `db``:db`.```t``.``export_2` VALUES (1, '@`var`.`var`');
# Data for table `db``:db`.```t``export_1`:
INSERT INTO `db``:db`.```t``export_1` VALUES (1, '@`var``var`');
INSERT INTO `db``:db`.```t``export_1` VALUES (2, '\0\'\"\b\n\r\t\Z\\\%\_');
#...done.
Test case 11 - export data with unicode characters
# WARNING: Using a password on the command line interface can be insecure.
# Source on localhost: ... connected.
SET FOREIGN_KEY_CHECKS=0;
USE `util_test`;
# Exporting data from `util_test`
# Data for table `util_test`.`t1`:
INSERT INTO `util_test`.`t1` VALUES ('01 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('02 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('03 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('04 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('05 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('06 Test Basic database example');
INSERT INTO `util_test`.`t1` VALUES ('07 Test Basic database example');
# Data for table `util_test`.`t2`:
INSERT INTO `util_test`.`t2` VALUES ('11 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES ('12 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES ('13 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES (NULL);
# Data for table `util_test`.`t3`:
INSERT INTO `util_test`.`t3` VALUES (1, '14 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (2, '15 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (3, '16 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (4, NULL);
# Data for table `util_test`.`t4`:
INSERT INTO `util_test`.`t4` VALUES (3, 2);
# Data for table `util_test`.`t5`:
INSERT INTO `util_test`.`t5` VALUES (1, 'kitkat', 0.99, 19);
INSERT INTO `util_test`.`t5` VALUES (2, 'M&M', 5.99, 19);
INSERT INTO `util_test`.`t5` VALUES (3, 'milk', 0.67, 5);
INSERT INTO `util_test`.`t5` VALUES (4, 'Dr. Pepper', 0.99, 19);
USE `import_test`;
# Exporting data from `import_test`
# Data for table `import_test`.`customers`:
INSERT INTO `import_test`.`customers` VALUES (1, 'Customer 1');
INSERT INTO `import_test`.`customers` VALUES (2, 'Customer 2');
INSERT INTO `import_test`.`customers` VALUES (3, 'Customer 3');
INSERT INTO `import_test`.`customers` VALUES (4, 'Customer 4');
INSERT INTO `import_test`.`customers` VALUES (5, 'Customer 5');
INSERT INTO `import_test`.`customers` VALUES (6, '客户6');
INSERT INTO `import_test`.`customers` VALUES (7, '中国简体，客户7');
INSERT INTO `import_test`.`customers` VALUES (8, 'Клиент 8');
#...done.
SET FOREIGN_KEY_CHECKS=1;
Test case 12 - export data with bit fields
# WARNING: Using a password on the command line interface can be insecure.
# Source on localhost: ... connected.
SET FOREIGN_KEY_CHECKS=0;
USE `util_test`;
# Exporting data from `util_test`
# Data for table `util_test`.`t1`:
INSERT INTO `util_test`.`t1` VALUES ('01 Test Basic database example', 73);
INSERT INTO `util_test`.`t1` VALUES ('02 Test Basic database example', 73);
INSERT INTO `util_test`.`t1` VALUES ('03 Test Basic database example', 73);
INSERT INTO `util_test`.`t1` VALUES ('04 Test Basic database example', 73);
INSERT INTO `util_test`.`t1` VALUES ('05 Test Basic database example', 73);
INSERT INTO `util_test`.`t1` VALUES ('06 Test Basic database example', 73);
INSERT INTO `util_test`.`t1` VALUES ('07 Test Basic database example', 73);
# Data for table `util_test`.`t2`:
INSERT INTO `util_test`.`t2` VALUES ('11 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES ('12 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES ('13 Test Basic database example');
INSERT INTO `util_test`.`t2` VALUES (NULL);
# Data for table `util_test`.`t3`:
INSERT INTO `util_test`.`t3` VALUES (1, '14 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (2, '15 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (3, '16 test fkeys');
INSERT INTO `util_test`.`t3` VALUES (4, NULL);
# Data for table `util_test`.`t4`:
INSERT INTO `util_test`.`t4` VALUES (3, 2);
# Data for table `util_test`.`t5`:
INSERT INTO `util_test`.`t5` VALUES (1, 'kitkat', 0.99, 19);
INSERT INTO `util_test`.`t5` VALUES (2, 'M&M', 5.99, 19);
INSERT INTO `util_test`.`t5` VALUES (3, 'milk', 0.67, 5);
INSERT INTO `util_test`.`t5` VALUES (4, 'Dr. Pepper', 0.99, 19);
#...done.
SET FOREIGN_KEY_CHECKS=1;
Test case 13 - export data with 0 auto_increment
# WARNING: Using a password on the command line interface can be insecure.
# Source on localhost: ... connected.
#
# WARNING: One or more tables were detected with a value of 0 in an auto_increment column. If you want to import the data, you must enable the SQL_MODE 'NO_AUTO_VALUE_ON_ZERO' during the import. Failure to do so may result in the wrong value used for the rows with 0 as the auto_increment value. The following statement is an example taken from the source server. Uncomment and adjust this statement as needed for the destination server.
# SET SQL_MODE '...,NO_AUTO_VALUE_ON_ZERO'
#
# Exporting metadata from `util_test`
DROP DATABASE IF EXISTS `util_test`;
CREATE DATABASE `util_test`;
USE `util_test`;
# TABLE: `util_test`.`tt0`
CREATE TABLE `tt0` (
# #if (server1 != 'MySQL') or (int(version1) < 80000)
  `a` int(11) NOT NULL AUTO_INCREMENT,
  `b` char(10) DEFAULT NULL,
  PRIMARY KEY (`a`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;
# #else
  `a` int NOT NULL AUTO_INCREMENT,
  `b` char(10) DEFAULT NULL,
  PRIMARY KEY (`a`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
# #endif
#...done.
USE `util_test`;
# Exporting data from `util_test`
# Data for table `util_test`.`tt0`:
INSERT INTO `util_test`.`tt0` VALUES (0, 'a');
INSERT INTO `util_test`.`tt0` VALUES (1, 'b');
#...done.
